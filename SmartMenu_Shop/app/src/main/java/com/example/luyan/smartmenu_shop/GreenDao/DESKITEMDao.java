package com.example.luyan.smartmenu_shop.GreenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.luyan.smartmenu_shop.Metadata.DESKITEM;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DESKITEM".
*/
public class DESKITEMDao extends AbstractDao<DESKITEM, Integer> {

    public static final String TABLENAME = "DESKITEM";

    /**
     * Properties of entity DESKITEM.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DeskId = new Property(0, int.class, "deskId", true, "DESK_ID");
        public final static Property DeskName = new Property(1, String.class, "deskName", false, "DESK_NAME");
        public final static Property DeskCapacity = new Property(2, int.class, "deskCapacity", false, "DESK_CAPACITY");
        public final static Property DeskStatue = new Property(3, int.class, "deskStatue", false, "DESK_STATUE");
        public final static Property DeskCateId = new Property(4, int.class, "deskCateId", false, "DESK_CATE_ID");
    }


    public DESKITEMDao(DaoConfig config) {
        super(config);
    }
    
    public DESKITEMDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DESKITEM\" (" + //
                "\"DESK_ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: deskId
                "\"DESK_NAME\" TEXT," + // 1: deskName
                "\"DESK_CAPACITY\" INTEGER NOT NULL ," + // 2: deskCapacity
                "\"DESK_STATUE\" INTEGER NOT NULL ," + // 3: deskStatue
                "\"DESK_CATE_ID\" INTEGER NOT NULL );"); // 4: deskCateId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DESKITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DESKITEM entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getDeskId());
 
        String deskName = entity.getDeskName();
        if (deskName != null) {
            stmt.bindString(2, deskName);
        }
        stmt.bindLong(3, entity.getDeskCapacity());
        stmt.bindLong(4, entity.getDeskStatue());
        stmt.bindLong(5, entity.getDeskCateId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DESKITEM entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getDeskId());
 
        String deskName = entity.getDeskName();
        if (deskName != null) {
            stmt.bindString(2, deskName);
        }
        stmt.bindLong(3, entity.getDeskCapacity());
        stmt.bindLong(4, entity.getDeskStatue());
        stmt.bindLong(5, entity.getDeskCateId());
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public DESKITEM readEntity(Cursor cursor, int offset) {
        DESKITEM entity = new DESKITEM( //
            cursor.getInt(offset + 0), // deskId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // deskName
            cursor.getInt(offset + 2), // deskCapacity
            cursor.getInt(offset + 3), // deskStatue
            cursor.getInt(offset + 4) // deskCateId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DESKITEM entity, int offset) {
        entity.setDeskId(cursor.getInt(offset + 0));
        entity.setDeskName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDeskCapacity(cursor.getInt(offset + 2));
        entity.setDeskStatue(cursor.getInt(offset + 3));
        entity.setDeskCateId(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(DESKITEM entity, long rowId) {
        return entity.getDeskId();
    }
    
    @Override
    public Integer getKey(DESKITEM entity) {
        if(entity != null) {
            return entity.getDeskId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DESKITEM entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
